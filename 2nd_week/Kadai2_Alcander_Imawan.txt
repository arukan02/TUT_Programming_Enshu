プログラミング応用演習I 第2回課題レポート 
氏名: Alcander Imawan
学籍番号: b243392
提出年月日: 2024年4月22日

1.1. フィボナッチ数列
1.1.1. プログラム
--- prog_1_1.c // prog_1_1.cのファイルの内容をコピー、ファイルも添付
* header files */
#include <stdio.h>

/* functions */
int pow_loop(int x, int y); // 関数宣言
int pow_recf(int x, int y); // 関数宣言

/* main */
int main(void) {
int x, y;
printf("The calculation of x to the power y, x^y\n")
printf("The exponent of a positive integer x (space) y: ");
scanf("%d%d", &x, &y);
printf("LOOP %d^%d = %d\n", x, y, pow_loop(x, y));
printf("RECF %d^%d = %d\n", x, y, pow_recf(x, y));
return 0;
}

/*exponential function using for loop*/
int pow_loop(int x, int y) {
    int i, result = 1;
    for (i=y; i >=1; i--){
        result *= x;
    }
    return result;
}

/*exponential function using recursive*/
int pow_recf(int x, int y) {
    if(y==0){
        return 1;
    } else {
        return x * pow_recf(x , y - 1);
    }
}
---

1.1.2. 実行結果 // コンソールをコピー
[a243392@xdev06 prog]$ gcc prog_1_1.c
[a243392@xdev06 prog]$ ./a.out
The calculation of x to the power y, x^y.
The exponent of a positive integer x (space) y: 4 3
LOOP 4^3 = 64
RECF 4^3 = 64
[a243392@xdev06 prog]$


1.2. 素因数分解
1.2.1. プログラム
--- prog_1_2.c // prog_1_2.cのファイルの内容をコピー、ファイルも添付
/* header files */
#include <stdio.h>

/* functions */
int euclid_loop(int m, int n); // 関数宣言
int euclid_recf(int m, int n); // 関数宣言

/* main */
int main(void) {
int m,n;
printf("The calculation of the greatest common factor of positive integers m and n.\n");
printf("m: ");
scanf("%d", &m);
printf("n: ");
scanf("%d", &n);
printf("LOOP GCD %d & %d = %d\n", m, n, euclid_loop(m, n));
printf("RECF GCD %d & %d = %d\n", m, n, euclid_recf(m, n));
return 0;
}

/*Euclidean function using for loop*/
int euclid_loop(int m, int n) {
    int temp;
    while (n != 0) { //repeat until n equals to zero (m mod n = 0)
        temp = n; //put n in temp variable
        n = m % n; //put the result of m mod n in n
        m = temp; //put temp as the new m
    }
    return m;
}

/*Euclidean function using recursive*/
int euclid_recf(int m, int n) {
    if(n==0){
        return m;
    } else {
        return euclid_recf(n , m % n); //when n is not zero, run the euclid_recf function again
    }

---

1.2.2. 実行結果
[a243392@xdev06 prog]$ gcc prog_1_2.c
[a243392@xdev06 prog]$ ./a.out
The calculation of the greatest common factor of positive integers m and n.
m: 300     
n: 255
LOOP GCD 300 & 255 = 15
RECF GCD 300 & 255 = 15
[a243392@xdev06 prog]$

1.3. べき乗
1.3.1. プログラム
--- prog_1_3.c // prog_1_3.cのファイルの内容をコピー、ファイルも添付
#include <stdio.h>

/* Function declarations */
int primeCheck(int n);
int prime(int n, int divisor);

/* Main function */
int main(void) {
    int n;
    printf("Prime number judgement.\n");
    printf("Enter an integer n (1 <= n <= 1000000): ");
    scanf("%d", &n);
    if (primeCheck(n)) {
        printf("%d is a prime number.\n", n);
    } else {
        printf("%d is not a prime number.\n", n);
    }
    return 0;
}

/* Function to check if a number is prime */
int primeCheck(int n) {
    if (n <= 1) {
        return 0; // Numbers less than or equal to 1 are not prime
    }
    return prime(n, 2); // Start checking divisors from 2
}

/* Recursive function to determine if a number is prime */
int prime(int n, int divisor) {
    if (divisor * divisor > n) {
        return 1; // If divisor exceeds the square root of n, n is prime
    }
    if (n % divisor == 0) {
        return 0; // If n is divisible by divisor, it's not prime
    }
    return prime(n, divisor + 1); // Recursively call prime with the next divisor
}
---

1.3.2. 実行結果 // コンソールをコピー
[a243392@xdev06 prog]$ gcc prog_1_3.c
[a243392@xdev06 prog]$ ./a.out
Prime number judgement.
Enter an integer n (1 <= n <= 1000000): 999983
999983 is a prime number.
[a243392@xdev06 prog]$ 

1.4. 感想 // 150字程度
久しぶりのC言語のプログラミングので、色々ネットで調べながらコードを書きました。
難しかった点と工夫した点
べき乗とユークリッド互除法は特に問題ありません。
普段はforループを使っていますので、再帰呼び出し関数はまだ慣れていません。
素数判定プログラムが難しいかったです。最初はdivisorをn/2までチェックするプログラム作りましたが、学校のLinuxシステムで試したら、
Segmentation faultのエラーが出ました。よく課題を見ると、1000000の入力に対して、最大５００回の計算にしないといけないという状態が書かれています。
すぐdivisorをn*nまでにします。

講義への要望等
特になし。