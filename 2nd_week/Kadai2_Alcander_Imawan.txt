プログラミング応用演習I 第2回課題レポート 
氏名: Alcander Imawan
学籍番号: b243392
提出年月日: 2024年4月22日

2.1．フィボナッチ数列
2.1.1. プログラム
--- prog_2_1.c
/* header files */
#include <stdio.h>

//Macro, define constant
#define ARRAY_SIZE 46

/* functions */
int fibonacci(int fibo[], int n); // 関数宣言

/* main */
int main(void) {
int n;
int fibo[ARRAY_SIZE] = {0,1,1}; //initialized by 0
printf("Fibonacci number f(n) = f(n - 1) + f(n - 2).\n");
printf("Enter a positive integer n (1 <= n <= 45): ");
scanf("%d", &n);
printf("f(%d) = %d\n", n, fibonacci(fibo, n));
return 0;
}

/*exponential function using for loop*/
int fibonacci(int fibo[], int n) {
    if (n==1 || n==2){
        return fibo[n];
    } else if (fibo[n] != 0) { // Check if the value is already calculated and stored
        return fibo[n];
    } else {
        fibo[n] = fibonacci(fibo, n - 1) + fibonacci(fibo, n - 2);
        return fibo[n];
    }
}
---

2.1.2. 実行結果 // コンソールをコピー
[a243392@xdev06 prog]$ gcc prog_2_1.c
[a243392@xdev06 prog]$ prog_2_1
Fibonacci number f(n) = f(n - 1) + f(n - 2).
Enter a positive integer n (1 <= n <= 45): 45
f(45) = 1134903170
[a243392@xdev06 prog]$


2.2．素因数分解 
2.2.1. プログラム
--- prog_2_2.c 
#include <stdio.h>

/* Function declarations */
void factorize(int n, int divisor);

/* Main function */
int main(void) {
    int n;
    printf("Prime factorization.\n");
    printf("Enter a positive integer n (2 <= n <= 10000):  ");
    scanf("%d", &n);
    printf("%d = ", n);
    factorize(n,2);
    return 0;
}

/* Recursive function to factorize with prime number */
void factorize(int n, int divisor) {
    if(n == 1){
        return;
    }
    if (n % divisor == 0) {
        if (n != divisor) {
            printf("%d x ", divisor); // Print the factor with "x" separator
        } else {
            printf("%d", divisor); // Print the last factor without "x" separator
        }
        factorize(n / divisor, divisor); 
    } else {
        factorize(n, divisor + 1); 
    }
}
---

2.2.2. 実行結果
[a243392@xdev06 prog]$ gcc prog_2_2.c
[a243392@xdev06 prog]$ prog_2_2
Prime factorization.
Enter a positive integer n (2 <= n <= 10000):  9990
9990 = 2 x 3 x 3 x 3 x 5 x 37
[a243392@xdev06 prog]$ prog_2_2
Prime factorization.
Enter a positive integer n (2 <= n <= 10000):  9973
9973 = 9973
[a243392@xdev06 prog]$ 

2.3．べき乗
2.3.1. プログラム
--- prog_2_3.c 
/* header files */
#include <stdio.h>
#include <math.h>

/* functions */
int power(int x, int y); // 関数宣言

/* main */
int main(void) {
int x,y;
printf("The calculation of x to the power y, x^y.\n");
printf("Enter integers x and y (x > 0, y >= 1) with a space between them: ");
scanf("%d%d", &x, &y);
printf("%d^%d = %d", x, y, power(x,y));
return 0;
}

/*exponential function using recursive*/
int power(int x, int y) {
    if (y == 0) {
        return 1;
    } else if (y % 2 == 0) {
        printf("recf\n");
        double temp = power(x, y / 2);
        return temp * temp;
    } else {
        printf("recf\n");
        double temp = power(x, (y - 1) / 2);
        return x * temp * temp;
    }
}

---

2.3.2. 実行結果 // コンソールをコピー
[a243392@xdev06 prog]$ gcc prog_2_3.c
[a243392@xdev06 prog]$ prog_2_3
The calculation of x to the power y, x^y.
Enter integers x and y (x > 0, y >= 1) with a space between them: 2 30
recf
recf
recf
recf
recf
2^30 = 1073741824
[a243392@xdev06 prog]$ 

1.4. 感想 // 150字程度
課題1のfibonacci数は配列が０からスタートするので、それを考えて、０番目を「０」にして、１番目と２番目を「１」にしたと決めました。
そこでちょっと悩みました。
課題２の素因数分解にでは掛ける「ｘ」サインをどうやって書くのかでちょっと時間かかりました、１５分ぐらいでした。それ以外の部分は２５分ぐらいかかりましたので、合計４０分程度でプログラムを完成しました。
課題３のべき乗は友達に相談しました。自分の代替の考え方があっていましたが、細かいのところでちょっと勘違いしましたので、それについて友達に相談しました。それは	recfについての問題でした。