プログラミング応用演習I 第5回課題レポート 
氏名: Alcander Imawan
学籍番号: b243392
提出年月日: 2024年5月30日

5.1．バブルソート
5.1.1. プログラム
--- prog_5_1.c
/* Example of bubble sort */
/* header files */
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <sys/time.h>

/* define */
#define N 30     // the number of array elements
#define MAX 100  // the range of elements (1 - MAX)

/* for debug */
int check_sorted(int original[], int sorted[], int n);

/* functions */
void bubble_sort(int array[], int n);

/* main */
int main(void) {
  int i, original[N], array[N];
  struct timeval start, end;        // structures for time measurement

  /* making random array */
  srand((unsigned int )time(NULL)); // set seed for randomization
  puts("An array of integers in random order.");
  for (i = 0; i < N; i++) {
    array[i] = rand() % MAX + 1;
    original[i] = array[i];
    printf("%d ", array[i]); /* print initial */
  }

  /* process sorting */
  puts("\nSorting by bubble sort.");
  gettimeofday(&start, NULL);
  bubble_sort(array, N);
  gettimeofday(&end, NULL);

  /* print result */
  for (i = 0; i < N; i++) {
    printf("%d ", array[i]);
  }

  /* show processing time */
  printf("\nTime taken by bubble sort %f s.\n",
         (end.tv_sec - start.tv_sec) + (end.tv_usec - start.tv_usec) * 1.0e-6);

  /* check validation */
  i = check_sorted(original, array, N);
  if (i == 0) {
    puts("### Warning ###   Sort Failed");
    return 1;
  }

  return 0;
}

/* sorting by bubble sort */
void bubble_sort(int array[], int n) {
  int i, j, temp;
  for (i = 0; i <= n - 1; i++) {
    for (j = n - 1; j >= i; j--) {
      if(array[i]>array[j]){
        temp = array[i];
        array[i] = array[j];
        array[j] = temp;
      }
    }
  }
}

/* debug */
int check_sorted(int original[], int sorted[], int n)
{
  int i,j,key;
  int *flag;
  flag = (int *)malloc(sizeof(int) * n);
  for(i = 0; i < n; i++) {
    flag[i] = 0;
  }
  /* */
  int res = 0;
  for(i = 0; i < n; i++) {
    key = sorted[i];
    for(j = 0; j < n; j++) {
      if(key == original[j] && flag[j] == 0) {
        flag[j] = 1;
        break;
      }
    }
    if(j==n) {
      printf("invalid sorted %d, %d\n", i, key);
      free(flag);
      return 0;
    }
  }
  /* */
  int prev = sorted[0];
  for(i = 1; i < n; i++) {
    if (sorted[i] < prev) {
      printf("sort failed %d, %d\n", i, sorted[i]);
      free(flag);
      return 0;
    }
    prev = sorted[i];
  }
  /* */
  free(flag);
  return 1;
}
---

5.1.2. 実行結果 // コンソールをコピー
[a243392@xdev02 kadai5]$ gcc prog_5_1.c
[a243392@xdev02 kadai5]$ ./prog51
An array of integers in random order.
40 88 4 24 57 39 55 34 15 72 49 54 23 22 76 57 54 75 77 49 10 63 70 74 26 30 51 8 35 48 
Sorting by bubble sort.
4 8 10 15 22 23 24 26 30 34 35 39 40 48 49 49 51 54 54 55 57 57 63 70 72 74 75 76 77 88 
Time taken by bubble sort 0.000002 s.
[a243392@xdev02 kadai5]$


5.2．クイックソート 
5.2.1. プログラム
--- prog_5_2.c 
/* Example of quick sort */
/* header files */
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <sys/time.h>

/* define */
#define N 20    // the number of array elements
#define MAX 40  // the range of elements (1 - MAX)
#define SWAP(type_, xx, yy) { type_ temp = xx; xx = yy; yy = temp; }

/* for debug */
int check_sorted(int original[], int sorted[], int n);

/* functions */
void quick_sort(int array[], int front, int rear);

/* main */
int main(void) {
  int i, original[N], array[N];
  struct timeval start, end;        // structures for time measurement

  /* making random array */
  srand((unsigned int )time(NULL)); // set seed for randomization
  puts("An array of integers in random order.");
  for (i = 0; i < N; i++) {
    array[i] = rand() % MAX + 1;
    original[i] = array[i];
    printf("%d ", array[i]); /* print initial */
  }

  /* process sorting */
  puts("\nSorting by quick sort.");
  gettimeofday(&start, NULL);
  quick_sort(array, 0, N-1);
  gettimeofday(&end, NULL);

  /* print result */
  for (i = 0; i < N; i++) {
    printf("%d ", array[i]);
  }

  /* show processing time */
  printf("\nTime taken by quick sort %f s.\n",
         (end.tv_sec - start.tv_sec) + (end.tv_usec - start.tv_usec) * 1.0e-6);

  /* check validation */
  i = check_sorted(original, array, N);
  if (i == 0) {
    puts("### Warning ###   Sort Failed");
    return 1;
  }

  return 0;
}

/* function version of swap */
void int_swap(int *x, int *y)
{
  int tmp = *x;
  *x = *y;
  *y = tmp;
}

/* sorting by quick sort */
void quick_sort(int array[], int front, int rear) {
  // for 2 elements
  if (rear - front == 1) {
    if (array[front] > array[rear]) {
      int diff = array[front];
      array[front] = array[rear];
      array[rear] = diff;
    }
    return;
  }
  // more than 2 elements
  int pivot, pindex, f, r;
  f = front; r = rear;
  pindex = (f + r)/2;
  pivot = array[ pindex ]; /* pivot selection */
  do {
    while (f <= rear  && array[f] <  pivot) {  f++; }
    while (r >= front && array[r] > pivot) {  r--; }
    if (f <= r) {
      printf(" %d <-> %d\n", array[f], array[r]);
      SWAP(int, array[f], array[r]);
      // OR // int_swap(&(array[f]), &(array[r]));
      f++;
      r--;
    }
  } while (f <= r);
  printf("[%d %d] / [%d %d]\n", front, r, f, rear);

  if (r < front) {
    // there is no element less than pivot
    return;

  } else {
    // there are two part for next step
    //r = f or f > rear
      quick_sort(array, f, rear);
      quick_sort(array, front, r);
  }
}

/* debug */
int check_sorted(int original[], int sorted[], int n)
{
  int i,j,key;
  int *flag;
  flag = (int *)malloc(sizeof(int) * n);
  for(i = 0; i < n; i++) {
    flag[i] = 0;
  }
  /* */
  int res = 0;
  for(i = 0; i < n; i++) {
    key = sorted[i];
    for(j = 0; j < n; j++) {
      if(key == original[j] && flag[j] == 0) {
        flag[j] = 1;
        break;
      }
    }
    if(j==n) {
      printf("invalid sorted %d, %d\n", i, key);
      free(flag);
      return 0;
    }
  }
  /* */
  int prev = sorted[0];
  for(i = 1; i < n; i++) {
    if (sorted[i] < prev) {
      printf("sort failed %d, %d\n", i, sorted[i]);
      free(flag);
      return 0;
    }
    prev = sorted[i];
  }
  /* */
  free(flag);
  return 1;
}
---

5.2.2. 実行結果
[a243392@xdev02 kadai5]$ gcc prog_5_2.c
[a243392@xdev02 kadai5]$ ./prog52
16 1 11 40 5 32 36 14 9 20 17 4 3 36 39 10 18 20 16 29 
Sorting by quick sort.
1 3 4 5 9 10 11 14 16 16 17 18 20 20 29 32 36 36 39 40 
Time taken by quick sort 0.000071 s.
[a243392@xdev02 kadai5]$ 


1.4. 感想 // 150字程度
バブルソートは簡単だと思う。
クイックソートの時、クイックソートのやり方はわかったが、プログラムが普段のクイックソートとちょっと違うと思ったので、１時間ぐらいかかった。