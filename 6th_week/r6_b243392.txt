プログラミング応用演習I 第6回課題レポート 
氏名: Alcander Imawan
学籍番号: b243392
提出年月日: 2024年6月07日

6.1．時間計算量
6.1.1. プログラム
--- prog_6_1.c
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

void insertionSort(int arr[], int n) {
    int i, key, j;
    for (i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}

void bubbleSort(int arr[], int n) {
    int i, j, temp;
    for (i = 0; i < n-1; i++)
        for (j = 0; j < n-i-1; j++)
            if (arr[j] > arr[j+1]) {
                temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
}

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = (low - 1);
    int j;
    for (j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            i++;
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
    int temp = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp;
    return (i + 1);
}

void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

void merge(int arr[], int l, int m, int r) {
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;

    int L[n1], R[n2];
    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

void fillArray(int arr[], int n) {
  int i;
    for (i = 0; i < n; i++) {
        arr[i] = rand() % 10000;
    }
}

double measureTime(void (*sortFunc)(int[], int), int arr[], int n) {
    clock_t start, end;
    start = clock();
    sortFunc(arr, n);
    end = clock();
    return ((double) (end - start)) / CLOCKS_PER_SEC;
}

// Function to measure time for Quick Sort
double measureTimeQuickSort(void (*sortFunc)(int[], int, int), int arr[], int low, int high) {
    clock_t start, end;
    start = clock();
    sortFunc(arr, low, high);
    end = clock();
    return ((double) (end - start)) / CLOCKS_PER_SEC;
}

// Function to measure time for Merge Sort
double measureTimeMergeSort(void (*sortFunc)(int[], int, int), int arr[], int l, int r) {
    clock_t start, end;
    start = clock();
    sortFunc(arr, l, r);
    end = clock();
    return ((double) (end - start)) / CLOCKS_PER_SEC;
}

void runTests(int n) {
    int *arr = (int *)malloc(n * sizeof(int));
    int trials = 5;
    int i;
    double insertionTime = 0.0, bubbleTime = 0.0, quickTime = 0.0, mergeTime = 0.0;

    for (i = 0; i < trials; i++) {
        fillArray(arr, n);
        int *temp = (int *)malloc(n * sizeof(int));

        memcpy(temp, arr, n * sizeof(int));
        insertionTime += measureTime(insertionSort, temp, n);

        memcpy(temp, arr, n * sizeof(int));
        bubbleTime += measureTime(bubbleSort, temp, n);

        memcpy(temp, arr, n * sizeof(int));
        quickTime += measureTimeQuickSort(quickSort, temp, 0, n - 1);

        memcpy(temp, arr, n * sizeof(int));
        mergeTime += measureTimeMergeSort(mergeSort, temp, 0, n - 1);

        free(temp);
    }

    free(arr);
    printf("n = %d:\n", n);
    printf("Insertion Sort: %.5f seconds\n", insertionTime / trials);
    printf("Bubble Sort: %.5f seconds\n", bubbleTime / trials);
    printf("Quick Sort: %.5f seconds\n", quickTime / trials);
    printf("Merge Sort: %.5f seconds\n", mergeTime / trials);
}

int main() {
    srand(time(0));

    int sizes[] = {1000, 2000, 4000, 8000};
    int numSizes = sizeof(sizes) / sizeof(sizes[0]);

    int i;
    for (i = 0; i < numSizes; i++) {
        runTests(sizes[i]);
    }

    return 0;
}

---

6.1.2. 実行結果 // コンソールをコピー
[a243392@xdev05 kadai6]$ gcc prog_6_1.c
[a243392@xdev05 kadai6]$ ./prog61
n = 1000:
Insertion Sort: 0.00040 seconds
Bubble Sort: 0.00140 seconds
Quick Sort: 0.00000 seconds
Merge Sort: 0.00000 seconds
n = 2000:
Insertion Sort: 0.00120 seconds
Bubble Sort: 0.00420 seconds
Quick Sort: 0.00000 seconds
Merge Sort: 0.00040 seconds
n = 4000:
Insertion Sort: 0.00560 seconds
Bubble Sort: 0.01540 seconds
Quick Sort: 0.00000 seconds
Merge Sort: 0.00040 seconds
n = 8000:
Insertion Sort: 0.01820 seconds
Bubble Sort: 0.05920 seconds
Quick Sort: 0.00040 seconds
Merge Sort: 0.00120 seconds
[a243392@xdev05 kadai6]$

| 要素数	|	挿入ソート 	| 	バブルソート 	| 	クイックソート	| 	マージソート 	|
| 1000 	|	0.00040	 	|	0.00140 	|	0.00000 	|	0.00000 	|
| 2000 	| 	0.00120	 	|	0.00420 	|	0.00000 	|	0.00040 	|
| 4000 	| 	0.00560  	|	0.01540 	|	0.00000 	|	0.00040		|
| 8000 	| 	0.01820  	|	0.05920 	|	0.00040 	|	0.00120		|
5回計算して平均をとる結果


6.2．クイックソート 
6.2.1. プログラム
--- prog_6_2.c 
/* 〇課題6.2 */
/* header files */
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <sys/time.h>

#define DEBUG 0

/* define */
#define MAX 100 // the range of elements (1 - MAX)

/* functions */
void merge(int array[], int temp[], int front, int rear);

/* for debug */
int check_sorted(int original[], int sorted[], int n);

/* main */
int main(int argc, char **argv) {
  int *array;
  int *original;
  int *temp;
  int n = 30;
  int i;
  struct timeval start, end;        // structures for time measurement

  if (argc > 1) {
    n = atoi(argv[1]);
  }
  array = (int *)malloc(sizeof(int) * n);
  temp  = (int *)malloc(sizeof(int) * n);
  original = (int *)malloc(sizeof(int) * n);

  srand((unsigned int )time(NULL)); // set seed for randomization
  for (i = 0; i < n; i++) {
    original[i] = array[i] = rand() % MAX + 1;
  }
#ifdef DEBUG
  puts("An array of integers in random order.");
  for (i = 0; i < n; i++) {
//      array[i] = rand() % MAX + 1;
    printf("%d ", array[i]);
  }
  puts("\nSorting by merge sort.");
#endif

  gettimeofday(&start, NULL);
  merge(array, temp, 0, n - 1);
  gettimeofday(&end, NULL);

#ifdef DEBUG
  for (i = 0; i < n; i++) {
    printf("%d ", array[i]);
  }
#endif
  printf("\nTime taken by merge sort: %f s.\n",
         (end.tv_sec - start.tv_sec) + (end.tv_usec - start.tv_usec) * 1.0e-6);

#ifdef DEBUG
  /* check validation */
  i = check_sorted(original, array, n);
  if (i == 0) {
    puts("### Warning ###   Sort Failed");
    return 1;
  }
#endif
  return 0;
}

/* sorting by merge sort */
void merge(int array[], int temp[], int front, int rear) {
  int mid, cur_f, cur_m, i;
#if DEBUG
  printf("*** merge called by front = %d, rear = %d, mid = %d: ",
         front, rear, (front + rear) / 2);
  for (i = front; i <= rear; i++) {
    printf("%d ", array[i]);
  }
  printf("\n");
#endif
  // return if front is equal to rear (only one element)
  if (front == rear) {
    return;
  }

  // update mid with a value intermediate between front and rear
  mid = (front + rear) / 2;

  // recursive calls of the function merge() in the range
  // from front to mid, and from mid + 1 to rear, respectively
  merge(array, temp, front, mid);
  merge(array, temp, mid + 1, rear);
#if DEBUG
  printf("\tStart merging with f = %d, m = %d: ", front, mid + 1);
#endif
  // copy the array data to the temporal array
  for (i = front; i <= rear; i++) {
    temp[i] = array[i];
#if DEBUG
    printf("%d ", temp[i]);
#endif
  }
#if DEBUG
  printf("\n");
#endif
  cur_f = front;
  cur_m = mid + 1;

  // merge the two halves of the array in ascending order
  i = front;
    while(cur_f <= mid && cur_m <= rear){
      if(temp[cur_f] <= temp[cur_m]){
        array[i] = temp[cur_f];
        cur_f += 1;
      }
      else{
        array[i] = temp[cur_m];
        cur_m += 1;
      }
      i++;
    }
    while(cur_f <= mid){
      array[i] = temp[cur_f];
      cur_f += 1;
      i++;
    }
    while(cur_m <= rear){
      array[i] = temp[cur_m];
      cur_m += 1;
      i++;
    }
  
  
  /*
  Write merge process here
  */

#if DEBUG
  printf("\tEnd merge: ");
  for (i = front; i <= rear; i++) {
    printf("%d ", array[i]);
  }
  printf("\n");
#endif
}

/* debug */
int check_sorted(int original[], int sorted[], int n)
{
  int i,j,key;
  int *flag;
  flag = (int *)malloc(sizeof(int) * n);
  for(i = 0; i < n; i++) {
    flag[i] = 0;
  }
  /* */
  int res = 0;
  for(i = 0; i < n; i++) {
    key = sorted[i];
    for(j = 0; j < n; j++) {
      if(key == original[j] && flag[j] == 0) {
        flag[j] = 1;
        break;
      }
    }
    if(j==n) {
      printf("invalid sorted %d, %d\n", i, key);
      free(flag);
      return 0;
    }
  }
  /* */
  int prev = sorted[0];
  for(i = 1; i < n; i++) {
    if (sorted[i] < prev) {
      printf("sort failed %d, %d\n", i, sorted[i]);
      free(flag);
      return 0;
    }
    prev = sorted[i];
  }
  /* */
  free(flag);
  return 1;
}
---

6.2.2. 実行結果
[a243392@xdev08 kadai6]$ gcc prog_6_2.c
[a243392@xdev08 kadai6]$ ./prog62
An array of integers in random order.
76 24 60 37 99 92 71 49 8 41 25 7 71 33 90 66 63 50 96 52 10 85 37 9 28 71 5 86 61 43 
Sorting by merge sort.
5 7 8 9 10 24 25 28 33 37 37 41 43 49 50 52 60 61 63 66 71 71 71 76 85 86 90 92 96 99 
Time taken by merge sort: 0.000002 s.
[a243392@xdev08 kadai6]$ 


1.4. 感想 // 150字程度
マージソート流行ったことあるので、30分ぐらいで解けた。
問題61はネットにあるソートアルゴリズムを使った。
